@page "/create-transaction"

@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ITransactionTypeService TransactionTypeService
@inject ITransactionService TransactionService
@inject ISnackbar Snackbar

<MudPopoverProvider />
<MudSnackbarProvider />

<MudCard Class="transaction-card">
	<MudCardContent>
		<MudText Typo="Typo.h5">Add Transaction</MudText>

		<MudTextField @bind-Value="_amount" Label="Amount" Required="true" Type="number" Color="Color.Dark" />

		<MudSelect T="TransactionCategory" @bind-Value="transactionCategory" Label="Transaction Category">
			<MudSelectItem T="TransactionCategory" Value="TransactionCategory.Income">Income</MudSelectItem>
			<MudSelectItem T="TransactionCategory" Value="TransactionCategory.Expense">Expense</MudSelectItem>
		</MudSelect>

		<MudSelect T="Guid?" @bind-Value="selectedTransactionTypeId" Label="Transaction Type">

			<MudSelectItem T="Guid?" Value="null" Disabled="true">-- Select Transaction Type --</MudSelectItem>

			@foreach (var type in transactionTypes.Where(t => t.Category == transactionCategory))
			{
				<MudSelectItem T="Guid?" Value="@type.Id">@type.Name</MudSelectItem>
			}
		</MudSelect>

	</MudCardContent>

	<MudCardActions>
		<MudButton Variant="Variant.Filled" Class="add-button" @onclick="OnCreateTransactionClicked">Add</MudButton>
		<MudButton Variant="Variant.Filled" Class="cancel-button" @onclick="OnCancelClicked">Cancel</MudButton>
	</MudCardActions>
</MudCard>


@code {
	private decimal _amount;
	private DateTime _date = DateTime.Today;
	private Guid? selectedTransactionTypeId = null;
	private TransactionCategory transactionCategory = TransactionCategory.Income;
	private List<TransactionTypeDto> transactionTypes = new List<TransactionTypeDto>();

	protected override async Task OnInitializedAsync()
	{
		var result = await TransactionTypeService.GetTransactionTypesAsync();

		if (!result.IsSuccess)
		{
			Snackbar.Add(result.ErrorMessage, Severity.Error);

			Navigation.NavigateTo("/error");

			return;
		}

		transactionTypes = result.Data;
	}


	private void OnCancelClicked()
	{
		Navigation.NavigateTo("/transactions");
	}

	private async Task OnCreateTransactionClicked()
	{
		if (_amount <= 0)
		{
			Snackbar.Add("Please enter a valid amount", Severity.Warning);
			return;
		}

		if (!selectedTransactionTypeId.HasValue)
		{
			Snackbar.Add("Please select a transaction type", Severity.Warning);
			return;
		}

		var newTransaction = new CreateTransactionDto
			{
				Amount = _amount,
				Date = _date,
				TransactionTypeId = selectedTransactionTypeId.Value
			};

		var result = await TransactionService.CreateTransactionAsync(newTransaction);

		TransactionDto createdTransaction = result.Data;

		Snackbar.Add("Transaction successfully added", Severity.Success);

		Navigation.NavigateTo("/transactions");
	}
}

